cmake_minimum_required(VERSION 3.16)
project(priority-queue)
set(CMAKE_CXX_STANDARD 17)

# 添加单元测试。
find_package(GTest)
if(GTest_FOUND)
    enable_testing()
    include(GoogleTest)
    file(GLOB TEST_SRC CONFIGURE_DEPENDS "test/*.t.cpp")
    add_executable(test_d_ary_heap ${TEST_SRC})
    target_link_libraries(test_d_ary_heap gmock gtest pthread)
    gtest_discover_tests(test_d_ary_heap XML_OUTPUT_DIR
                        ${CMAKE_CURRENT_BINARY_DIR}/Testing)
    message(STATUS "GTest found, test cases can be executed.")
else(GTest_FOUND)
    message(WARNING "Unable to find GTest!")
endif(GTest_FOUND)

# 添加benchmark用例。
find_package(benchmark)
if(benchmark_FOUND)
  set(BENCHMARK_ENABLE_TESTING OFF)
  file(GLOB_RECURSE ALL_BENCH_SRC "bench/*.cpp")
  include_directories(${benchmark_LIBRARIES})
  foreach(BENCH_SRC ${ALL_BENCH_SRC})
    get_filename_component(BENCH_EXEC ${BENCH_SRC} NAME_WE)
    set(TARGET_NAME bench_${BENCH_EXEC})
    add_executable(${TARGET_NAME} EXCLUDE_FROM_ALL
                   ${BENCH_SRC} ${PP_SERVER_SRC} ${COLL_DETECT_SRC})
    set_target_properties(${TARGET_NAME} PROPERTIES OUTPUT_NAME ${BENCH_EXEC})
    target_link_libraries(${TARGET_NAME} benchmark::benchmark)
  endforeach()
  message(STATUS "Google benchmark found, benchmarking can be implemented.")
else(benchmark_FOUND)
  message(WARNING "Unable to find Google benchmark!")
endif(benchmark_FOUND)
